using MySql.Data.MySqlClient;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace GGRCSMScheduler
{
    public class ChartDataCl
    {
        public string Label { get; set; }
        public double XValue { get; set; }
        public DateTime XValueDT { get; set; }
        public double Value { get; set; }
        public ChartDataCl()
        {
            Label = "";
            XValue = 0;
            Value = 0;
            XValueDT = new DateTime();
        }
    }
    public class DistricCoordinator
    {
        public string Block { get; set; }
        public string PhoneNo { get; set; }

    }

    public class WrmsAdmin
    {
        public string Msg { get; set; }
        public string PhoneNo { get; set; }
        public DateTime ddat { get; set; }
    }
    public class ChartDataSeries
    {
        public List<ChartDataCl> lstChartDataCl { get; set; }
        public string SeriesName { get; set; }
        public double Rank { get; set; }

        public ChartDataSeries()
        {
            lstChartDataCl = new List<ChartDataCl>();
            SeriesName = "";
            Rank = 0;
        }
        public ChartDataSeries(List<ChartDataCl> lstChartDataCl, string SeriesName, double Rank)
        {
            this.lstChartDataCl = lstChartDataCl;
            this.SeriesName = SeriesName;
            this.Rank = Rank;
        }
        public ChartDataSeries(List<ChartDataCl> lstChartDataCl, string SeriesName)
        {
            this.lstChartDataCl = lstChartDataCl;
            this.SeriesName = SeriesName;
        }
    }
    public class StringString
    {
        public string Str1 { get; set; }
        public string Str2 { get; set; }

        public StringString()
        {
            Str1 = "";
            Str2 = "";
        }

        public StringString(string Str1, string Str2)
        {
            this.Str1 = Str1;
            this.Str2 = Str2;
        }
    }
    public class StringStringString
    {
        public string Str1 { get; set; }
        public string Str2 { get; set; }
        public string Str3 { get; set; }

        public StringStringString()
        {
            Str1 = "";
            Str2 = "";
            Str3 = "";
        }

        public StringStringString(string Str1, string Str2, string Str3)
        {
            this.Str1 = Str1;
            this.Str2 = Str2;
            this.Str3 = Str3;
        }


    }
    public class DataTableAndColDesc
    {
        public DataTable DT { get; set; }
        public DataTable DT4 { get; set; }
        public DataTable DT5 { get; set; }
        public DataTable DT6 { get; set; }
        public DataTable DT7 { get; set; }
        public DataTable DT8 { get; set; }
        public List<string> lstColNames { get; set; }
        public List<StringString> lstFilter { get; set; }
        public DataTable DTLegends { get; set; }
        public string ChartData { get; set; }
        public string SoilInfo { get; set; }
        public string ForecastInfo { get; set; }
        public DataTable DTChartDesc { get; set; }
        public List<string> lstFilter2 { get; set; }
        public List<StringStringString> lstSSS { get; set; }
        public List<ChartDataSeries> lstChartDataSeries { get; set; }
        public List<ChartDataSeries> lstChartDataSeries2 { get; set; }
        public List<ChartDataSeries> lstChartDataSeries3 { get; set; }
        public List<ChartDataSeries> lstChartDataSeries4 { get; set; }

        public int ID { get; set; }
        public DataTableAndColDesc()
        {
            ID = 0;
            DT = new DataTable();
            lstColNames = new List<string>();
            lstFilter = new List<StringString>();
            DTLegends = new DataTable();
            DTChartDesc = new DataTable();
            ChartData = "";
            lstFilter2 = new List<string>();
            lstChartDataSeries = new List<ChartDataSeries>();
            DT4 = new DataTable();
            DT5 = new DataTable();
            DT6 = new DataTable();
            DT7 = new DataTable();
            DT8 = new DataTable();
        }
    }



    class Program
    {
        public static MySqlConnection conn;
        public static string Address = "Server=wrdb.c4pqfsdaiccz.us-east-1.rds.amazonaws.com;Port=3306;DataBase=wrserver1;Uid=weathermaster;Pwd=neon04$WR1;charset=utf8";
        static ArrayList arrActivityLog = new ArrayList();
        static int AppID = 17;
        public static System.Threading.Mutex mutex = new Mutex(true, "GGRCSMScheduler.exe");

        static void Main(string[] args)
        {
            Program objProg = new Program();
            bool createdNew;
            Program objProgram = new Program();
            if (mutex.WaitOne(TimeSpan.Zero, true))
            {
                createdNew = true;

            }
            else
                createdNew = false;

            if (createdNew)
            {
                //  arrActivityLog.Add("Started at " + DateTime.Now);
                Console.WriteLine("GGRC SMS Scheduler");
                Console.WriteLine("Start at ... " + DateTime.Now);
                arrActivityLog.Add("Started at " + DateTime.Now);

                // if (DateTime.Now.Hour < 10 || DateTime.Now.Hour > 20)
                //     return;
                // objProg.addToCMLog();

                //objProg.SMSSchedulerMain();
                //objProg.SMSSchedulerMain_GGRC();
                //   arrActivityLog.Add("Finished at " + DateTime.Now);
                // objProg.addToCMLog();
                // objProg.updAppLastRun();
                // objProg.SMSSchedulerMain_GGRC();
                //  objProg.SMSSend();
               // objProg.SMSSendApprovedMessage();
                objProg.SMSSchedulerMain_Crop();
                //objProg.Fill_VillageID_IN_YfiGGC();

            }
            else
            {
                Console.WriteLine("Program is already running");
            }
        }

        public void Fill_VillageID_IN_YfiGGC()
        {
            DataTable dtvillage = getYfiGGRCData();

            for (int i = 0; i < dtvillage.Rows.Count; i++)
            {
                Update_YfiGGRCData_ByID(dtvillage.Rows[i]["ID"].ToString(), dtvillage.Rows[i]["District"].ToString(), dtvillage.Rows[i]["Village"].ToString());
                Console.WriteLine(i);
            }

        }

        public string ConDateTime(DateTime Dt)
        {
            string year;
            string month;
            string Day;
            string hr;
            string mn;
            string sec;

            string FinalDt;

            year = Dt.Year.ToString();
            month = Dt.Month.ToString(); if (month.Length < 2) { month = "0" + month; }
            Day = Dt.Day.ToString(); if (Day.Length < 2) { Day = "0" + Day; }
            hr = Dt.Hour.ToString(); if (hr.Length < 2) { hr = "0" + hr; }
            mn = Dt.Minute.ToString(); if (mn.Length < 2) { mn = "0" + mn; }
            sec = Dt.Second.ToString(); if (sec.Length < 2) { sec = "0" + sec; }
            FinalDt = year + "-" + month + "-" + Day + " " + hr + ":" + mn + ":" + sec;

            return FinalDt;


        }

        public bool addToCMLog()
        {
            conn = new MySqlConnection(Address);
            conn.Open();

            string LogDate = ConDateTime(DateTime.Now);
            string sql = "";
            string sqlhead = "insert into appManager.cm_log (AppID, Priority, Status, LogDate) values ";
            string sqlbody = "";
            try
            {
                for (int i = 0; i < arrActivityLog.Count; i++)
                {
                    if (sqlbody != "")
                        sqlbody = sqlbody + ", ";
                    string Status = arrActivityLog[i].ToString();
                    string Priority = "Normal";
                    if (Status.Contains("(ERR)"))
                    {
                        Priority = "Error";
                        Status = Status.Replace("(ERR)", "");
                    }
                    else if (Status.Contains("(WAR)"))
                    {
                        Priority = "Warning";
                        Status = Status.Replace("(WAR)", "");
                    }
                    if (Status.Contains("'"))
                        Status = Status.Replace("'", "''");
                    sqlbody = sqlbody + "(" + AppID + ", '" + Priority + "', '" + Status + "', '" + LogDate + "')";
                }
                sql = sqlhead + sqlbody;
            }
            catch (Exception ex)
            {

            }

            try
            {
                MySqlCommand Cmd = new MySqlCommand(sql, conn);
                if (Cmd.ExecuteNonQuery() > 0)
                {
                    conn.Close();
                    return true;
                }
                else
                {
                    conn.Close();
                    return false;
                }

            }
            catch (Exception e)
            {
                conn.Close();
                return false;
            }

        }
        public bool updAppLastRun()
        { // Last App running time
            //  MySqlConnection conn = (MYINGEN.DBEngine()).getconn();
            string sql = "update appManager.cm_apps set LastRanAt = '" + ConDateTime(DateTime.Now) + "' where ID = " + AppID;
            try
            {

                //  MySqlCommand Cmd = new MySqlCommand(sql, conn);
                execQuery(sql);
                return true;

            }
            catch (Exception e)
            {
                //conn.Close();
                return false;
            }

        }

        public bool Connection()
        {
            bool retval = false;
            conn = new MySqlConnection(Address);
            int ctr = 0;
            while (retval == false && ctr <= 5)
            {
                try
                {
                    if (conn.State == ConnectionState.Closed) conn.Open();
                    retval = true;
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    arrActivityLog.Add("(ERR)Connection error");
                    Console.WriteLine("Connection error");
                    ctr = ctr + 1;
                    retval = false;
                }
            }
            return retval;
        }

        public DataTable getGGRCMoisture(string VillageID, DateTime dtFrom, DateTime dtTo)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();
            try
            {
                if (ConnFound)
                {
                    string sql = "select * from test.sentinel_village_soil where Village_ID = " + VillageID +
                     " and Start_Date >= '" + dtFrom.ToString("yyyy-MM-dd") + "' and Start_Date <= '" + dtTo.ToString("yyyy-MM-dd") + "'";

                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }

        public DataTable getGGRCNDVI(string VillageID, DateTime dtFrom, DateTime dtTo)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();
            try
            {
                if (ConnFound)
                {
                    string sql = "select * from test.sentinel_village_ndvi where Village_ID = " + VillageID +
                     " and Start_Date >= '" + dtFrom.ToString("yyyy-MM-dd") + "' and Start_Date <= '" + dtTo.ToString("yyyy-MM-dd") + "' where Village_mean!='9999999'";

                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }


        public bool chkVillageProcessed(string VillageID, string MessageType)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();

            try
            {
                if (ConnFound)
                {
                    string sql = "select LogDate from mfi.sms_lastsend where VillageID = " + VillageID + " and MessageType = '" + MessageType + "'";

                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return false;
                    }
                    DT = DataSet.Tables[0];
                    conn.Close();
                    DateTime dtLogDate = new DateTime();
                    DateTime.TryParse(DT.Rows[0]["LogDate"].ToString(), out dtLogDate);
                    if (dtLogDate.Date == DateTime.Now.Date)
                        return true;
                    else
                        return false;

                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return false;
            }

        }

        public DataTable getVillageLastMessage(string VillageID, string MessageType)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();

            try
            {
                if (ConnFound)
                {
                    string sql = "select * from mfi.ggrcvillagesms where VillageID = " + VillageID + " and MessageType = '" + MessageType + "' and Status != 'Expire' ";

                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;
                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }
        public DataTable getData(string sql)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();


            try
            {
                if (ConnFound)
                {


                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }


        public DataTable getYfiGGRCData()
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();


            try
            {
                if (ConnFound)
                {
                    string sql = " select * from wrserver1.yfi_ggrc where villageId is null order by Id ";


                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }

        public DataTable Update_YfiGGRCData_ByID(string Id, string District, string village)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();


            try
            {
                if (ConnFound)
                {
                    string sql = " select * from test.sentinel_village_master where District='" + District + "' and Village_Final='" + village + "' ";


                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    sql = "update wrserver1.yfi_ggrc set VillageID='" + DataSet.Tables[0].Rows[0]["Village_ID"] + "' where ID='" + Id + "';";
                    execQuery(sql);

                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }
        public DataTable getSMSMaster_SoilLab(string Client)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();


            try
            {
                if (ConnFound)
                {
                    string sql = "select * from mfi.ggrcsmsmaster where 1 ";

                    sql += "and MessageTypeName = 'Soil lab'";

                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }


        public DataTable getSMSMaster(string Client)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();


            try
            {
                if (ConnFound)
                {
                    //string sql = "select * from mfi.ggrcsmsmaster where CLient is null or Client = '' ";                  
                    //if (Client != "")
                    //    sql += " or ( Client ='" + Client + "')";                 
                    string sql = "select * from mfi.ggrcsmsmaster where CLient='test'";
                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }

        public DataTable getGGRCVillages()
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();


            try
            {
                if (ConnFound)
                {
                   // string sql = "select ggrc.*,Date_format(sen.SowingDate,'%Y-%m-%d') SowingDateValue,(ymin+ymax)/2 Latitude, (xmin+xmax)/2 Longitude,CropName from wrserver1.yfi_ggrc ggrc left join test.sentinel_village_master sen on ggrc.VillageID = sen.Village_ID in (1,2) ";
                    string sql= "select Village,WRMS_StateID,Village_ID,Date_format(sen.SowingDate,'%Y-%m-%d') SowingDateValue,(ymin+ymax)/2 Latitude, (xmin+xmax)/2 Longitude,CropID from  test.sentinel_village_master sen where sen.Village_ID in (1,2) ";

                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    Adpter.SelectCommand.CommandTimeout = 1800;
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }


        public DataTable getSentinelVillages(string CLients, string NotClients)
        {
            DataTable DT = new DataTable();
            bool ConnFound = Connection();


            try
            {
                if (ConnFound)
                {
                    string sql = "select VIllage_ID ID, VIllage_Final Name,(ymin+ymax)/2 Latitude, (xmin+xmax)/2 Longitude, Client, District_ID from test.sentinel_village_master where 1 ";

                    if (CLients != "")
                        sql += " and Client in (" + CLients + ")";
                    if (NotClients != "")
                        sql += " and Client not in (" + NotClients + ")";


                    MySqlDataAdapter Adpter = new MySqlDataAdapter(sql, conn);
                    DataSet DataSet = new DataSet();
                    Adpter.Fill(DataSet);

                    if (DataSet.Tables.Count == 0 || DataSet.Tables[0].Rows.Count == 0)
                    {
                        conn.Close();
                        return DT;
                    }
                    DT = DataSet.Tables[0];

                    conn.Close();
                    return DT;

                }
                else
                {
                    return DT;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return DT;
            }

        }

        public string getGGRCForecastSMS(double Latitude, double Longitude, string Village, string Client)
        {
            string result = "";
            try
            {
                WebClient wc = new WebClient();
                string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/WZDailyForecast/" + Latitude + "," + Longitude + "/New%20Delhi/" + DateTime.Now.AddDays(1).ToString("yyyy-MM-dd") + "/" + DateTime.Now.AddDays(3).ToString("yyyy-MM-dd") + "/District/json/internal";
                string strForecast = wc.DownloadString(apiAddr);
                // strForecast = strForecast.Replace("\\\\\\\"","\"");
                DataTable DTForecastFUll = new DataTable();
                DataTable DTForecast = new DataTable();
                string objFOrecast = JsonConvert.DeserializeObject<string>(strForecast);
                if (objFOrecast != "no data")
                {
                    DTForecastFUll = JsonConvert.DeserializeObject<DataTable>(objFOrecast);
                    double MaxTemp_Max = 0;
                    double MaxTemp_Min = 1000;
                    double MinTemp_Max = 0;
                    double MinTemp_Min = 1000;
                    double Humidity_Max = 0;
                    double Humidity_Min = 1000;
                    double TotRain = 0;
                    for (int i = 0; i < DTForecastFUll.Rows.Count; i++)
                    {
                        if (DTForecastFUll.Rows[i]["MaxTemp"].ToString() != "")
                        {
                            double MaxTemp = DTForecastFUll.Rows[i]["MaxTemp"].ToString().doubleTP();
                            if (MaxTemp > MaxTemp_Max)
                                MaxTemp_Max = MaxTemp;
                            if (MaxTemp < MaxTemp_Min)
                                MaxTemp_Min = MaxTemp;

                        }

                        if (DTForecastFUll.Rows[i]["MinTemp"].ToString() != "")
                        {
                            double MinTemp = DTForecastFUll.Rows[i]["MinTemp"].ToString().doubleTP();
                            if (MinTemp > MinTemp_Max)
                                MinTemp_Max = MinTemp;
                            if (MinTemp < MinTemp_Min)
                                MinTemp_Min = MinTemp;

                        }

                        if (DTForecastFUll.Rows[i]["Humidity"].ToString() != "")
                        {
                            double Humidity = DTForecastFUll.Rows[i]["Humidity"].ToString().doubleTP();
                            if (Humidity > Humidity_Max)
                                Humidity_Max = Humidity;
                            if (Humidity < Humidity_Min)
                                Humidity_Min = Humidity;

                        }

                        TotRain = TotRain + DTForecastFUll.Rows[i]["Rain"].ToString().doubleTP();

                    }
                    if (Client == "ggrc")
                        result = "હવામાન આગાહી: આગામી ૩ દિવસ માટે મહત્તમ તાપમાન " + MaxTemp_Min + " - " +
                                 MaxTemp_Max + " સે. લઘુત્તમ તાપમાન " + MinTemp_Min + " - " + MinTemp_Max + " સે. આદ્રતા (હવાનો ભેજ ) " + Humidity_Min + " - " + Humidity_Max +
                                 "%, વરસાદ- " + TotRain + " મી.મી.";
                    else
                        result = Village + " Weather Forecast: Next 3 days MaxTemp " + MaxTemp_Min + " - " +
                             MaxTemp_Max + " C MinTemp " + MinTemp_Min + " - " + MinTemp_Max + " C Humidity " + Humidity_Min + " - " + Humidity_Max +
                             "% Rain - " + TotRain + " mm";

                }
                return result;
            }
            catch (Exception ex)
            {
                return result;
            }
        }

        public string getGGRCSoilAnalysis(string VillageID, double Latitude, double Longitude, string SoilFactorType)
        {
            string result = "";
            try
            {
                WebClient wc = new WebClient();
                string apiAddr = "http://myfarminfo.com//yfirest.svc/Soil/Info/" + Latitude + "/" + Longitude;
                string strForecast = wc.DownloadString(apiAddr);
                // strForecast = strForecast.Replace("\\\\\\\"","\"");
                DataTableAndColDesc DTForecastFUll = new DataTableAndColDesc();
                DataTable DTPH = new DataTable();
                DataTable DTSandyTexture = new DataTable();
                string objFOrecast = JsonConvert.DeserializeObject<string>(strForecast);
                if (objFOrecast != "no data")
                {
                    DTForecastFUll = JsonConvert.DeserializeObject<DataTableAndColDesc>(objFOrecast);
                }
                DTPH = DTForecastFUll.DTChartDesc;
                DTSandyTexture = DTForecastFUll.DT;
                if (SoilFactorType == "PH")
                {
                    result = DTPH.Rows[0]["PH"].ToString();
                }
                else if (SoilFactorType == "SoilTexture")
                {
                    result = DTSandyTexture.Rows[0]["Name"].ToString();
                }


                return result;
            }
            catch (Exception ex)
            {
                return result;
            }
        }

        public string getGGRCMoistureSMS(string VillageID, string Village, string Client)
        {
            DateTime dtFrom = new DateTime();
            DateTime dtTo = new DateTime();

            string result = "";
            DataTable DTMoisture = getGGRCMoisture(VillageID, dtFrom, dtTo);

            for (int i = 0; i < DTMoisture.Rows.Count; i++)
            {

                string strSM = DTMoisture.Rows[i]["Village_soilmean"].ToString();
                double SM = 0;
                double.TryParse(strSM, out SM);
                if (SM < -0.0125)
                {
                    if (Client == "ggrc")
                        result = " નાઈટ્રોજનની ઉણપ અથવા માટીમાં ઓછા  ભેજની સ્થિતિને કારણે પાંદડા પીળા પડી જાય તો યુરિયાનું  1-2%  નું દ્રાવણ પાંદડાં પર છંટકાવ કરવાની સલાહ આપવામાં આવે છે.";
                    else
                        result = "Foliar application of Urea @ 1-2 % is advisable if leaves are yellowing due to nitrogen deficiency or in low Soil moisture condition";
                }
            }

            return result;
        }

        void SMSSchedulerMain()
        {
            execQuery("delete from mfi.ggrcvillagesms where LogDate < '" + DateTime.Now.AddDays(-14).ToString("yyyy-MM-dd") + "'");
            execQuery("delete from mfi.sms_lastsend where date(LogDate) < '" + DateTime.Now.ToString("yyyy-MM-dd") + "'");

            DataTable DTVillages = new DataTable();
            DTVillages = getSentinelVillages("", "'ggrc','pepsico','pepsico_old'");

            DataTable DTSMSTypes = getSMSMaster("jalna");


            for (int i = 0; i < DTVillages.Rows.Count; i++)
            {
                string VillageID = DTVillages.Rows[i]["ID"].ToString();
                string Village = DTVillages.Rows[i]["Name"].ToString();
                string DistrictID = DTVillages.Rows[i]["District_ID"].ToString();
                string Client = DTVillages.Rows[i]["Client"].ToString();
                Console.WriteLine("Starting for " + Village + "(" + i + " / " + DTVillages.Rows.Count + ") at " + DateTime.Now);
                double Latitude = DTVillages.Rows[i]["Latitude"].ToString().doubleTP();
                double Longitude = DTVillages.Rows[i]["Longitude"].ToString().doubleTP();

                for (int j = 0; j < DTSMSTypes.Rows.Count; j++)
                {

                    string MessageID = DTSMSTypes.Rows[j]["ID"].ToString();

                    string MessageVillageID = DTSMSTypes.Rows[j]["VillageID"].ToString();
                    string MessageDistrict = DTSMSTypes.Rows[j]["DistrictID"].ToString();

                    string MessageType = DTSMSTypes.Rows[j]["MessageType"].ToString();
                    string SendingType = DTSMSTypes.Rows[j]["SendingType"].ToString();

                    if (MessageDistrict != "" && MessageDistrict != "0" && DistrictID != MessageDistrict)
                        continue;
                    int SendingFrequency = 0;
                    int.TryParse(DTSMSTypes.Rows[j]["SendingFrequency"].ToString(), out SendingFrequency);
                    DateTime SendingDate = new DateTime();
                    DateTime.TryParse(DTSMSTypes.Rows[j]["SendingDate"].ToString(), out SendingDate);
                    DateTime dtLastSentDate = new DateTime();
                    string CustomMessage = DTSMSTypes.Rows[j]["Message"].ToString();
                    string Status = "";
                    string SMS = "";
                    string SMS2 = "";
                    if (chkVillageProcessed(VillageID, MessageType))
                        continue;

                    DataTable DTLastMessage = getVillageLastMessage(VillageID, MessageType);

                    if (DTLastMessage.Rows.Count > 0)
                    {
                        DateTime.TryParse(DTLastMessage.Rows[0]["ScheduleDate"].ToString(), out dtLastSentDate);
                        Status = DTLastMessage.Rows[0]["Status"].ToString();
                    }

                    bool flgDoProcess = false;

                    if (SendingType == "Day")
                        flgDoProcess = (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= dtLastSentDate.Date.AddDays(SendingFrequency)));
                    else
                        flgDoProcess = (DateTime.Now >= SendingDate && Status == "" && SendingDate.AddDays(4) > DateTime.Now);

                    if (!flgDoProcess)
                        continue;

                    if (MessageType == "forecast")
                    {
                        SMS = getGGRCForecastSMS(Latitude, Longitude, Village, Client);
                    }
                    else if (MessageType == "weather")
                    {
                        SMS = getGGRCWeatherDataSMS(Latitude, Longitude, Village, Client);
                    }
                    else if (MessageType == "disease")
                    {
                        List<string> lstSMS = getGGRCDiseaseSMS(Latitude, Longitude, Village, Client);
                        if (lstSMS.Count > 0)
                        {
                            SMS = lstSMS[0];
                            SMS2 = lstSMS[1];
                        }
                    }
                    else if (MessageType == "disease2")
                    {
                        if (chkLateBlightCondition(Latitude, Longitude, Village, Client))
                        {
                            SMS = CustomMessage;
                        }
                    }
                    else if (MessageType == "planthealth")
                    {
                        SMS = getGGRCMoistureSMS(VillageID, Village, Client);
                    }
                    else if (MessageType == "raindeficit")
                    {
                        if (Client == "ggrc")
                            SMS = "વરસાદ અછતની પરિસ્થિતિમાં જમીનના ભેજનું સંરક્ષણ કરવું જરૂરી છે તે માટે વારંવાર કરબ (હળવી ખેડ- જમીન ના ઉપર ના પડ ને તોડવા માટે) થી ખેડ કરવી સલાહભર્યું છે.";
                        else
                            SMS = "Repeated hoeing is advisable to conserve the soil moisture under scanty rainfall conditions.";
                    }
                    else if (MessageType == "leafreddening")
                    {
                        if (Client == "ggrc")
                            SMS = "ફૂલ ભમરી અને જીંડવા શરુ થવાના સમયે ૦.૨% મેગ્નેશિયમ સલ્ફેટ આપવાથી પાન ની રતાશ ઓછી કરી શકાય.";
                        else
                            SMS = "Application of 0.2 % Magnesium sulphate at square formation and boll formation to reduce leaf reddening.";
                    }
                    else if (MessageType == "flower1" || MessageType == "flower2" || MessageType == "flower3")
                    {
                        if (Client == "ggrc")
                            SMS = " મહત્તમ ઉપજ માટે, ફૂલ ભમરીના પ્રારંભિક તબક્કે પોટેશિયમ નાઈટ્રેટ 2 કિલોગ્રામ / 100 લિટર પાણીનો  પાંદડાં પર છંટકાવ લાભદાયી રહેશે.";
                        else
                            SMS = "For yield maximization, foliar application of Potassium Nitrate @ 2kg/100 lit of water at flower initiation stage would be benificial.";
                    }
                    else if (MessageType == "weedemergence")
                    {
                        if (Client == "ggrc")
                            SMS = "નીંદણ નિયત્રણ: ઉગતા નીંદણને નિયંત્રિત કરવા માટે પાક માં આંતરખેડ કરવી જોઈએ.";
                        else
                            SMS = "Weed Management: Intercultural operations should be carried out to control emerging weeds.";
                    }
                    else if (MessageType == "flowertoball")
                    {
                        if (Client == "ggrc")
                            SMS = "ફૂલ અને કળી નું ખરી પડવું : NAA (પ્લેનોફિક્ષ) નો છંટકાવ : ફૂલો અને ફૂલ ભમરીની વધુ સંખ્યાને જાળવી રાખવા અને ઉપજ વધારવા માટે પાક પર 15 લિટર પાણી પ્રમાણે  3.5 મીલી NAA નો છંટકાવ કરવો.";
                        else
                            SMS = "Flower/ Bud dropping: Spray Of NAA(Planofix): Spray NAA @ 3.5 ml per 15 litres of water on the crop to retain more number of squares and flowers and to increase the yield.";
                    }
                    else if (MessageType.ToLower().Contains("custom"))
                        SMS = CustomMessage;



                    if (SendingType == "Date" && DateTime.Now >= SendingDate && Status == "")
                    {
                        if (SMS != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType, DistrictID) values ('" + VillageID + "', '" + SendingDate.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "'," + DistrictID + ")");
                        if (SMS2 != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType, DistrictID) values ('" + VillageID + "', '" + SendingDate.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "'," + DistrictID + ")");
                        if (SMS != "" && SMS2 != "")
                            Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    }
                    else if (SendingType == "Day" && (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= dtLastSentDate.Date.AddDays(SendingFrequency))))
                    {
                        execQuery("update mfi.ggrcvillagesms set Status = 'Expired' where VillageID = " + VillageID + " and MessageType = '" + MessageType + "'");


                        if (SMS != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate, Status, Message, MessageType, DistrictID) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "'," + DistrictID + ")");
                        if (SMS2 != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType, DistrictID) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "'," + DistrictID + ")");

                        if (SMS != "" && SMS2 != "")
                            Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    }

                    execQuery("insert into mfi.sms_lastsend (VillageID, LogDate, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + MessageType + "')");

                }
            }
        }

        public List<WrmsAdmin> FillWrmsAdmin()
        {
            List<WrmsAdmin> lstwrmsadmin = new List<WrmsAdmin>();
            DataTable dt = getData("Select * from mfi.wrmsadminMsg where date(ddat)='" + DateTime.Now.ToString("yyyy-dd-MM") + "'");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                WrmsAdmin wa = new WrmsAdmin();
                DateTime ddt = new DateTime();
                DateTime.TryParse(dt.Rows[i]["ddat"].ToString(), out ddt);
                wa.Msg = dt.Rows[i]["Msg"].ToString();
                wa.PhoneNo = dt.Rows[i]["PhoneNo"].ToString();
                wa.ddat = ddt;
                lstwrmsadmin.Add(wa);
            }
            return lstwrmsadmin;
        }
        void SMSSend()
        {

            DataTable DTVillageSMS = getData(" select sms.* from mfi.ggrcvillagesms sms  left join mfi.ggrcsmsmaster mas on mas.MessageType = sms.MessageType  where mas.messagetypename = 'Land Preparation-Stage-II'");
            int FarmerCnt = 0;
            string insertString = "insert into wrserver1.smsout(SndFrom, SndTo, MsgType, Subject, message, Status, MsgMode, Channel,  OutDate,ccsid) values ";
            string bodyquery = "";
            for (int i = 0; i < DTVillageSMS.Rows.Count; i++)
            {
                string VillageID = DTVillageSMS.Rows[i]["VillageID"].ToString();
                string Message = DTVillageSMS.Rows[i]["Message"].ToString();
                string MessageType = DTVillageSMS.Rows[i]["MessageType"].ToString();
                string sql = "select far.ID, far.Name, PhoneNo, District, Taluka, Village,far.CLusterID  from wrserver1.yfi_ggrc_farmers far left join yfi_ggrc loc on far.CLusterID = loc.ID where 1 ";

                sql = sql + " and loc.ID = " + VillageID;

                DataTable DTFarmers = getData(sql);


                for (int k = 0; k < DTFarmers.Rows.Count; k++)
                {
                    FarmerCnt++;
                    string PhoneNo = DTFarmers.Rows[k]["PhoneNo"].ToString();
                    if (bodyquery != "")
                        bodyquery += ",";
                    bodyquery += "('GGRCFarmers', '" + PhoneNo + "', 'GGRC', 'GGRC Subject', '" + Message + "', 'Pending', 'Unicode', 'Gateway2', '" + DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss") + "','" + MessageType + "')";

                    if (FarmerCnt % 1000 == 0)
                    {
                        execQuery(insertString + bodyquery);
                        Console.WriteLine("Inserted " + i + "/" + DTVillageSMS.Rows.Count);
                        bodyquery = "";
                    }
                }

                Console.WriteLine(i + "/" + DTVillageSMS.Rows.Count);
            }
            execQuery(insertString + bodyquery);

        }

        void SMSSendApprovedMessage()
        {
            List<WrmsAdmin> lstwrmsadmin = FillWrmsAdmin();
            List<DistricCoordinator> lstdic = new List<DistricCoordinator>();
            lstdic.Add(new DistricCoordinator() { Block = "Vadodara", PhoneNo = "9979853448" });
            lstdic.Add(new DistricCoordinator() { Block = "Vadodara", PhoneNo = "9820578984" });
            lstdic.Add(new DistricCoordinator() { Block = "Vadodara", PhoneNo = "9909986773" });
            lstdic.Add(new DistricCoordinator() { Block = "Vadodara", PhoneNo = "9904072825" });
            lstdic.Add(new DistricCoordinator() { Block = "Vadodara", PhoneNo = "9725001323" });
            lstdic.Add(new DistricCoordinator() { Block = "Vadodara", PhoneNo = "9725151239" });
            lstdic.Add(new DistricCoordinator() { Block = "Rajkot", PhoneNo = "9909099220" });
            lstdic.Add(new DistricCoordinator() { Block = "Amreli", PhoneNo = "9979859661" });
            lstdic.Add(new DistricCoordinator() { Block = "Rajpipla", PhoneNo = "9909971553" });
            lstdic.Add(new DistricCoordinator() { Block = "Jamnagar", PhoneNo = "9909971592" });
            lstdic.Add(new DistricCoordinator() { Block = "Junagadh", PhoneNo = "9909971573" });
            lstdic.Add(new DistricCoordinator() { Block = "Himatnagar", PhoneNo = "9909971883" });
            lstdic.Add(new DistricCoordinator() { Block = "Bharuch", PhoneNo = "9979883565" });

            List<string> lstSupport = new List<string>() { "9794585750", "9711931599", "8800559475" };

            DataTable DTVillageSMS = getData(" select *,ggrc.District mDistrict,sms.ID smsID from mfi.ggrcvillagesms sms  left join mfi.ggrcsmsmaster mas on mas.MessageType = sms.MessageType left join wrserver1.yfi_ggrc ggrc on ggrc.ID=sms.VillageID  where sms.status='Approve'");

            string insertwrmsadmin = "insert into mfi.wrmsadminmsg(Msg, PhoneNo, ddat) values ";
            string bodyquerywrmsadmin = "";
            int FarmerCnt = 0;
            string insertString = "insert into wrserver1.smsout(SndFrom, SndTo, MsgType, Subject, message, Status, MsgMode, Channel,  OutDate,ccsid) values ";
            string updatestring = "update mfi.ggrcvillagesms set status='Send' where 1 ";
            string updatepart = "";
            string bodyquery = "";
            string smsID = "";
            for (int i = 0; i < DTVillageSMS.Rows.Count; i++)
            {
                if (smsID != "")
                    smsID = ",";
                smsID += "'" + DTVillageSMS.Rows[i]["smsID"].ToString() + "'";
                string VillageID = DTVillageSMS.Rows[i]["VillageID"].ToString();
                string Message = DTVillageSMS.Rows[i]["Message"].ToString();
                string districtId = DTVillageSMS.Rows[i]["mDistrict"].ToString();
                string MessageType = DTVillageSMS.Rows[i]["MessageType"].ToString();
                List<DistricCoordinator> lstdc = lstdic.FindAll(a => a.Block.ToLower() == districtId.ToLower());
                for (int j = 0; j < lstdc.Count; j++)
                {
                    if (lstwrmsadmin.FindAll(a => a.Msg == Message && a.PhoneNo == lstdc[j].PhoneNo).Count == 0)
                    {
                        if (bodyquery != "")
                            bodyquery += ",";
                        bodyquery += "('GGRCFarmers', '" + lstdc[j].PhoneNo + "', 'GGRC', 'GGRC Subject', '" + Message + "', 'Pending', 'Unicode', 'Gateway2', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + MessageType + "')";
                        lstwrmsadmin.Add(new WrmsAdmin() { Msg = Message, PhoneNo = lstdc[j].PhoneNo, ddat = DateTime.Now });
                        if (bodyquerywrmsadmin != "")
                            bodyquerywrmsadmin += ",";
                        bodyquerywrmsadmin += "( '" + Message + "','" + lstdc[j].PhoneNo + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    }
                }
                for (int j = 0; j < lstSupport.Count; j++)
                {
                    if (lstwrmsadmin.FindAll(a => a.Msg == Message && a.PhoneNo.ToString() == lstSupport[j]).Count == 0)
                    {
                        if (bodyquery != "")
                            bodyquery += ",";
                        bodyquery += "('GGRCFarmers', '" + lstSupport[j] + "', 'GGRC', 'GGRC Subject', '" + Message + "', 'Pending', 'Unicode', 'Gateway2', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + MessageType + "')";
                        lstwrmsadmin.Add(new WrmsAdmin() { Msg = Message, PhoneNo = lstSupport[j], ddat = DateTime.Now });
                        if (bodyquerywrmsadmin != "")
                            bodyquerywrmsadmin += ",";
                        bodyquerywrmsadmin += "( '" + Message + "','" + lstSupport[j] + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                    }
                }
                string sql = "select far.ID, far.Name, PhoneNo, District, Taluka, Village,far.CLusterID  from wrserver1.yfi_ggrc_farmers far left join yfi_ggrc loc on far.CLusterID = loc.ID where 1 ";
                sql = sql + " and loc.ID = " + VillageID;
                DataTable DTFarmers = getData(sql);
                for (int k = 0; k < DTFarmers.Rows.Count; k++)
                {
                    FarmerCnt++;
                    string PhoneNo = DTFarmers.Rows[k]["PhoneNo"].ToString();
                    if (bodyquery != "")
                        bodyquery += ",";
                    bodyquery += "('GGRCFarmers', '" + PhoneNo + "', 'GGRC', 'GGRC Subject', '" + Message + "', 'Pending', 'Unicode', 'Gateway2', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + MessageType + "')";
                    if (FarmerCnt % 1000 == 0)
                    {
                        updatepart = " and ID in (" + smsID + ")";
                        execQuery(updatestring + updatepart);
                        smsID = "";
                        execQuery(insertString + bodyquery);
                        Console.WriteLine("Inserted " + i + "/" + DTVillageSMS.Rows.Count);
                        bodyquery = "";
                    }
                }
                Console.WriteLine(i + "/" + DTVillageSMS.Rows.Count);
            }
            if (smsID != "")
            {
                updatepart = " and ID in (" + smsID + ")";
                execQuery(updatestring + updatepart);
                smsID = "";
            }
            if (bodyquery != "")
                execQuery(insertString + bodyquery);
            if (bodyquerywrmsadmin.Trim() != "")
            {
                execQuery(insertwrmsadmin + bodyquerywrmsadmin);
                bodyquerywrmsadmin = "";
            }
        }


        void SMSSchedulerMain_Crop()
        {
            execQuery("delete from mfi.ggrcvillagesms where LogDate < '" + DateTime.Now.AddDays(-14).ToString("yyyy-MM-dd") + "'");
            execQuery("delete from mfi.sms_lastsend where date(LogDate) < '" + DateTime.Now.ToString("yyyy-MM-dd") + "'");

            DataTable DTVillages = new DataTable();
            DTVillages = getGGRCVillages();
           // string Client = "ggrc";
            string Client = "test";

            DataTable DTSMSTypes = getSMSMaster(Client);


            for (int i = 0; i < DTVillages.Rows.Count; i++)
            {
                string SowingDate = DTVillages.Rows[i]["SowingDateValue"].ToString();
                string VillageID = DTVillages.Rows[i]["Village_ID"].ToString();
                string Village = DTVillages.Rows[i]["Village"].ToString();
                string stateID = DTVillages.Rows[i]["WRMS_StateID"].ToString();
               // string District = DTVillages.Rows[i]["District"].ToString();
                //string Block = DTVillages.Rows[i]["Taluka"].ToString();
                string cropid = DTVillages.Rows[i]["CropID"].ToString();
                Console.WriteLine("Starting for " + Village + "(" + i + " / " + DTVillages.Rows.Count + ") at " + DateTime.Now);
                double Latitude = DTVillages.Rows[i]["Latitude"].ToString().doubleTP();
                double Longitude = DTVillages.Rows[i]["Longitude"].ToString().doubleTP();
                //if (!(District == "PORBANDAR"))
                //    continue;
                string cropname = "";
                try
                {
                    conn.Open();
                    string getcropname = "SELECT CropName FROM wrserver1.cropmaster where CropID='"+cropid+"'";
                    MySqlCommand command = new MySqlCommand(getcropname, conn);
                    MySqlDataReader rd1 = command.ExecuteReader();
                    if (rd1.HasRows)
                    {
                        while (rd1.Read())
                        {
                            cropname=rd1["CropName"].ToString();
                        }
                    }
                    conn.Close();
                }
                catch(Exception ex)
                {

                }

                for (int j = 0; j < DTSMSTypes.Rows.Count; j++)
                {



                    string month = "";
                    string MessageType = DTSMSTypes.Rows[j]["MessageType"].ToString();
                    //if (!(MessageType == "Custom_ZY4BBB5RF9JHWPJV"))
                    //    continue;
                    string MessageVillageID = DTSMSTypes.Rows[j]["VillageID"].ToString();
                    string MessageDistrict = DTSMSTypes.Rows[j]["DistrictID"].ToString();
                    string MessageBlock = DTSMSTypes.Rows[j]["BlockID"].ToString();
                    if (!(MessageType.ToLower().Contains("custom")))
                    {
                        if (Latitude == 0)
                            continue;
                    }

                    DateTime DTSowingDate = new DateTime();
                    if (SowingDate != "")
                    {
                        string[] ArrSowingDate = SowingDate.Split('-');
                        month = ArrSowingDate[1];
                        DTSowingDate = new DateTime(Convert.ToInt32(ArrSowingDate[0]), Convert.ToInt32(ArrSowingDate[1]), Convert.ToInt32(ArrSowingDate[2]));
                    }

                    //if (MessageType.ToLower().Contains("custom"))
                    //{
                    //    bool flgMessageSend = false;
                    //    if (VillageID == MessageVillageID || (MessageVillageID == "0" && MessageBlock == Block) || (MessageVillageID == "0" && MessageBlock == "0" && MessageDistrict == District) || (MessageVillageID == "0" && MessageBlock == "0" && MessageDistrict == "0"))
                    //        flgMessageSend = true;

                    //    if (!flgMessageSend)
                    //        continue;
                    //}
                    //else
                    //  continue;
                    string SendingType = DTSMSTypes.Rows[j]["SendingType"].ToString();
                    int SendingFrequency = 0;
                    int.TryParse(DTSMSTypes.Rows[j]["SendingFrequency"].ToString(), out SendingFrequency);
                    DateTime SendingDate = new DateTime();
                    DateTime.TryParse(DTSMSTypes.Rows[j]["SendingDate"].ToString(), out SendingDate);
                    DateTime dtLastSentDate = new DateTime();
                    string CustomMessage = DTSMSTypes.Rows[j]["Message"].ToString();
                    string FloatingDays = DTSMSTypes.Rows[j]["FloatingDays"].ToString();
                    string Status = "";
                    string SMS = "";
                    string SMS2 = "";
                    double totalrain = 0;
                    int floatdays = 0;
                    double EVRate = 0;
                    DateTime onsetdate = new DateTime();
                    DateTime changingdate = new DateTime();
                    DateTime d = DateTime.Now.Date;
                    string smsstatus = "";
                    if (cropname == "Cotton")
                    {                                            
                        //Check For SmS Status//                                                                                      

                        smsstatus = GetSmsStatus(cropid,VillageID);

                        if (smsstatus == "" || smsstatus == "Pending")                       
                        {
                            if (SowingDate != "")
                            {
                                onsetdate = DTSowingDate.AddDays(20);
                                changingdate = DTSowingDate.AddDays(20);                            
                                EVRate = GetMeanEt(month, stateID);
                                totalrain = GetCropRainData(Latitude, Longitude, Village, Client);
                                totalrain = totalrain + EVRate;
                                DateTime check_date = GetdateOfCrop(cropid, VillageID);
                                string current_status = GetCropCurrentsataus(cropid,VillageID);
                                if (DateTime.Now.Date >= check_date.Date)
                                {
                                    if (totalrain > 25)
                                    {
                                        step1(d, totalrain, cropid, VillageID, onsetdate, Latitude, Longitude, Village, Client, out SMS);
                                        updatecropcurrentstatus(cropid, VillageID);
                                    }
                                    if (totalrain < 20)
                                    {

                                    }
                                }
                            }
                        }
                    }







                    if (FloatingDays != "")
                    {
                        int.TryParse(FloatingDays, out floatdays);
                    }

                    //if (chkVillageProcessed(VillageID, MessageType))
                    //    continue;

                 //   DataTable DTLastMessage = getVillageLastMessage(VillageID, MessageType);

                 ////   if (DTLastMessage.Rows.Count > 0)
                 //   {
                 //       DateTime.TryParse(DTLastMessage.Rows[0]["ScheduleDate"].ToString(), out dtLastSentDate);
                 //       Status = DTLastMessage.Rows[0]["Status"].ToString();
                 //   }

                    bool flgDoProcess = false;

                    if (SendingType == "Day")
                        flgDoProcess = (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= dtLastSentDate.Date.AddDays(SendingFrequency)));
                    else if (SendingType == "Floating")
                        flgDoProcess = (DateTime.Now.Date == DTSowingDate.AddDays(floatdays) && Status == "");
                    else
                        flgDoProcess = (DateTime.Now >= SendingDate && SendingDate > DateTime.Now.AddDays(-15) && Status == "");

                    if (!flgDoProcess)
                        continue;

                    if (MessageType == "forecast")
                    {
                        SMS = getGGRCForecastSMS(Latitude, Longitude, Village, Client);
                    }
                    if (MessageType == "PHLow")
                    {
                        string Ph = "";
                        Ph = getGGRCSoilAnalysis(Village, Latitude, Longitude, "PH");
                        if (!(Ph.doubleTP() < 5.5))
                            continue;
                        SMS = CustomMessage;

                    }
                    if (MessageType == "PHHigh")
                    {
                        string Ph = "";
                        Ph = getGGRCSoilAnalysis(Village, Latitude, Longitude, "PH");
                        if (!(Ph.doubleTP() > 8.0))
                            continue;
                        SMS = CustomMessage;
                    }
                    if (MessageType == "SoilTexture")
                    {
                        string st = "";
                        st = getGGRCSoilAnalysis(Village, Latitude, Longitude, "SoilTexture");
                        if (!(st.ToLower().Contains("sandy")))
                            continue;
                        SMS = CustomMessage;
                    }
                    //if (MessageType == "NDVI")
                    //{
                    //    DataTable DTNDVI = new DataTable();
                    //    DTNDVI = getGGRCNDVI(VillageID, DTSowingDate.AddDays(90), DTSowingDate.AddDays(120));
                    //    string NDVIValue = DTNDVI.Rows[0][0].ToString().Trim();
                    //    if (NDVIValue == "")
                    //        continue;
                    //    double NDVI = NDVIValue.doubleTP();
                    //    if (!(NDVI < 0.5))
                    //        continue;
                    //    SMS = CustomMessage;
                    //}
                    else if (MessageType == "weather")
                    {
                        SMS = getGGRCWeatherDataSMS(Latitude, Longitude, Village, Client);
                    }
                    else if (MessageType == "disease")
                    {
                        List<string> lstSMS = getGGRCDiseaseSMS(Latitude, Longitude, Village, Client);
                        if (lstSMS.Count > 0)
                        {
                            SMS = lstSMS[0];
                            SMS2 = lstSMS[1];
                        }
                    }
                    //else if (MessageType == "planthealth")
                    //{
                    //    SMS = getGGRCMoistureSMS(VillageID, Village, Client);
                    //}
                    else if (MessageType == "raindeficit")
                    {
                        if (Client == "ggrc")
                            SMS = "વરસાદ અછતની પરિસ્થિતિમાં જમીનના ભેજનું સંરક્ષણ કરવું જરૂરી છે તે માટે વારંવાર કરબ (હળવી ખેડ- જમીન ના ઉપર ના પડ ને તોડવા માટે) થી ખેડ કરવી સલાહભર્યું છે.";
                        else
                            SMS = "Repeated hoeing is advisable to conserve the soil moisture under scanty rainfall conditions.";
                    }
                    else if (MessageType == "leafreddening")
                    {
                        if (Client == "ggrc")
                            SMS = "ફૂલ ભમરી અને જીંડવા શરુ થવાના સમયે ૦.૨% મેગ્નેશિયમ સલ્ફેટ આપવાથી પાન ની રતાશ ઓછી કરી શકાય.";
                        else
                            SMS = "Application of 0.2 % Magnesium sulphate at square formation and boll formation to reduce leaf reddening.";
                    }
                    else if (MessageType == "flower1" || MessageType == "flower2" || MessageType == "flower3")
                    {
                        if (Client == "ggrc")
                            SMS = " મહત્તમ ઉપજ માટે, ફૂલ ભમરીના પ્રારંભિક તબક્કે પોટેશિયમ નાઈટ્રેટ 2 કિલોગ્રામ / 100 લિટર પાણીનો  પાંદડાં પર છંટકાવ લાભદાયી રહેશે.";
                        else
                            SMS = "For yield maximization, foliar application of Potassium Nitrate @ 2kg/100 lit of water at flower initiation stage would be benificial.";
                    }
                    else if (MessageType == "weedemergence")
                    {
                        if (Client == "ggrc")
                            SMS = "નીંદણ નિયત્રણ: ઉગતા નીંદણને નિયંત્રિત કરવા માટે પાક માં આંતરખેડ કરવી જોઈએ.";
                        else
                            SMS = "Weed Management: Intercultural operations should be carried out to control emerging weeds.";
                    }
                    else if (MessageType == "flowertoball")
                    {
                        if (Client == "ggrc")
                            SMS = "ફૂલ અને કળી નું ખરી પડવું : NAA (પ્લેનોફિક્ષ) નો છંટકાવ : ફૂલો અને ફૂલ ભમરીની વધુ સંખ્યાને જાળવી રાખવા અને ઉપજ વધારવા માટે પાક પર 15 લિટર પાણી પ્રમાણે  3.5 મીલી NAA નો છંટકાવ કરવો.";
                        else
                            SMS = "Flower/ Bud dropping: Spray Of NAA(Planofix): Spray NAA @ 3.5 ml per 15 litres of water on the crop to retain more number of squares and flowers and to increase the yield.";
                    }
                    else if (MessageType.ToLower().Contains("custom"))
                        SMS = CustomMessage;
                    

                    //if (SendingType == "Date" && DateTime.Now >= SendingDate && Status == "")
                    //{
                    //    if (SMS != "")
                    //        execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + SendingDate.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "')");
                    //    if (SMS2 != "")
                    //        execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + SendingDate.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "')");
                    //    if (SMS != "" && SMS2 != "")
                    //        Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    //}
                    //else if (SendingType == "Day" && (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= dtLastSentDate.Date.AddDays(SendingFrequency))))
                    //{
                    //    execQuery("update mfi.ggrcvillagesms set Status = 'Expired' where VillageID = " + VillageID + " and MessageType = '" + MessageType + "'");


                    //    if (SMS != "")
                    //        execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate, Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "')");
                    //    if (SMS2 != "")
                    //        execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "')");

                    //    if (SMS != "" && SMS2 != "")
                    //        Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    //}
                    else if (SendingType == "Floating" && (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= DTSowingDate.AddDays(floatdays))))
                    {
                        //execQuery("update mfi.ggrcvillagesms set Status = 'Expired' where VillageID = " + VillageID + " and MessageType = '" + MessageType + "'");


                        //if (SMS != "")
                        //    execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate, Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "')");
                        //if (SMS2 != "")
                        //    execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "')");

                        //if (SMS != "" && SMS2 != "")
                        //    Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    }
                    // execQuery("insert into mfi.sms_lastsend (VillageID, LogDate, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + MessageType + "')");

                }
            }
        }

        private void updatecropcurrentstatus(string cropid, string villageID)
        {
            bool ConnFound = Connection();
          
            try
            {
                if (ConnFound)
                {

                    string checktableentry = "SELECT Check_Date FROM mfi.cotton_cropmessage where CropID='" + cropid + "' and VillageID='" + villageID + "' ";
                    MySqlCommand command = new MySqlCommand(checktableentry, conn);
                    MySqlDataReader rd1 = command.ExecuteReader();
                    if (rd1.HasRows)
                    {
                        while (rd1.Read())
                        {
                            date = Convert.ToDateTime(rd1["Check_Date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {

            }

           
        }

        private string GetCropCurrentsataus(string cropid, string villageID)
        {
            bool ConnFound = Connection();
            DateTime date = new DateTime();
            try
            {
                if (ConnFound)
                {

                    string checktableentry = "SELECT Check_Date FROM mfi.cotton_cropmessage where CropID='" + cropid + "' and VillageID='" + villageID + "' ";
                    MySqlCommand command = new MySqlCommand(checktableentry, conn);
                    MySqlDataReader rd1 = command.ExecuteReader();
                    if (rd1.HasRows)
                    {
                        while (rd1.Read())
                        {
                            date = Convert.ToDateTime(rd1["Check_Date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {

            }

            return date;
        }

        private void Step2(double totalrain, double totalrainforcast, DateTime d, string cropid, string villageID,double Latitude,double Longitude,string Village,string Client,DateTime onsetdate, out string SMS)
        {
            SMS = "";
            DateTime date = GetdateOfCrop(cropid, villageID);
            if (totalrainforcast > 0)
            {
                SMS = "Wait (for 3) days and broad cast “Rainfall expected, please do not irrigate in next 3 days";
               
                step3(date, Latitude, Longitude, Village, Client, totalrain, cropid, villageID,onsetdate, totalrainforcast, d);


            }
            else
            {
                double pourwater = 0;
                pourwater = .5 * totalrain;
                SMS = "Please release '" + Math.Round(pourwater, 0) + "' mm of rainfall";
                if((date.Date - DateTime.Now.Date).Days == 3)
                step3(date, Latitude, Longitude, Village, Client, totalrain, cropid, villageID, onsetdate, totalrainforcast, d);
            }
          
        }

        private void step3(DateTime date, double latitude, double longitude, string village, string client, double totalrain, string cropid, string villageID, DateTime onsetdate, double totalrainforcast, DateTime d)
        {
           
                int tolrenec = 0;
                double raininthirstep = 0;
                raininthirstep = getGGRCCropForecastSMS(latitude, longitude, village, client);
                if (raininthirstep + tolrenec > 0)
                {
                    string SMS = "";
                    step1(date, totalrain, cropid, villageID, onsetdate, latitude, longitude, village, client, out SMS);
                }          
            else if ((DateTime.Now.Date - onsetdate.Date).Days < 7)
            {
                string SMS = "";
                Step2(totalrain, totalrainforcast, d, cropid, villageID, latitude, longitude, village, client, onsetdate, out SMS);
            }
            else
                step4(totalrain, totalrainforcast, d, cropid, villageID, latitude, longitude, village, client, onsetdate);
        }

        private void step4(double totalrain, double totalrainforcast, DateTime d, string cropid, string villageID, double latitude, double longitude, string village, string client, DateTime onsetdate)
        {
            if ((DateTime.Now.Date - onsetdate.Date).Days > 7 && (DateTime.Now.Date - onsetdate.Date).Days < 12)
            {
                string SMS = "";
                Step2(totalrain, totalrainforcast, d, cropid, villageID, latitude, longitude, village, client, onsetdate, out SMS);
            }
            else
            {
                updatecropsmsstatus(cropid, villageID);
                
            }
        }

   

        private void step1(DateTime d,double totalrain,string cropid, string villageID,DateTime onsetdate,double Latitude, double Longitude,string Village, string Client,out string SMS)
        {
            SMS = "";
            if (totalrain > 25)
            {
                SMS = "Please irrigate according to soil moisture in your farm as rainfall could have happened in last few days";
                updatecropsmsstatus(cropid, villageID);
            }
            updatetable(d, cropid, villageID, onsetdate);
            double totalrainforcast = 0;
            totalrainforcast = getGGRCCropForecastSMS(Latitude, Longitude, Village, Client);
            Step2(totalrain, totalrainforcast, d, cropid, villageID, Latitude, Longitude, Village, Client, onsetdate,out SMS);
           
        }

        

        private void updatecropsmsstatus(string cropid, string villageID)
        {
            bool ConnFound = Connection();
           
            try
            {
                if (ConnFound)
                {
                    string checksmsstatus = "update mfi.cotton_cropmessage set SMS_Status='Sent' where CropID='" + cropid + "' and VillageID='" + villageID + "'";
                    MySqlCommand sqlCommand = new MySqlCommand(checksmsstatus, conn);
                    sqlCommand.ExecuteNonQuery();              
                }
                conn.Close();
            }
            catch (Exception ex)
            {

            }
            finally { conn.Close(); }

           
        }

        private string GetSmsStatus(string cropid, string villageID)
        {
            bool ConnFound = Connection();
            string sms = "";
            try
            {
                if (ConnFound)
                {
                    string checksmsstatus = "select SMS_Status from mfi.cotton_cropmessage where CropID='"+cropid+ "' and VillageID='"+villageID+"'";
                    MySqlCommand sqlCommand = new MySqlCommand(checksmsstatus,conn);
                    MySqlDataReader dataReader = sqlCommand.ExecuteReader();
                    if(dataReader.HasRows)
                    {
                        while(dataReader.Read())
                        {
                            sms = dataReader["SMS_Status"].ToString();
                        }
                    }
                }
                conn.Close();
            }
            catch(Exception ex)
            {

            }
            finally { conn.Close(); }

            return sms;
              
        }

        private DateTime GetdateOfCrop(string cropid, string villageID)
        {
            bool ConnFound = Connection();
            DateTime date = new DateTime();
            try
            {
                if (ConnFound)
                {

                    string checktableentry = "SELECT Check_Date FROM mfi.cotton_cropmessage where CropID='" + cropid + "' and VillageID='" + villageID + "' ";
                    MySqlCommand command = new MySqlCommand(checktableentry, conn);
                    MySqlDataReader rd1 = command.ExecuteReader();
                    if (rd1.HasRows)
                    {
                        while (rd1.Read())
                        {
                            date=Convert.ToDateTime(rd1["Check_Date"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch(Exception ex)
            {

            }

            return date;
        }

        private void updatetable(DateTime date,string cropid,string villID,DateTime onsetdate)
        {
            bool ConnFound = Connection();
            List<string> chkdate = new List<string>();

            try
            {
                if (ConnFound)
                {

                    string checktableentry = "SELECT Check_Date FROM mfi.cotton_cropmessage where CropID='"+cropid+"' and VillageID='"+villID+"' ";
                    MySqlCommand command = new MySqlCommand(checktableentry, conn);
                    MySqlDataReader rd1 = command.ExecuteReader();
                    if(!rd1.HasRows)
                    { rd1.Close(); }
                    if(rd1.HasRows)
                    {
                        while(rd1.Read())
                        {
                            chkdate.Add(rd1["Check_Date"].ToString());
                        }
                        rd1.Close();
                    }

                    if(chkdate.Count>0)
                    {
                        string update = "update mfi.cotton_cropmessage set Check_Date='"+date+ "'where CropID='" + cropid + "' and VillageID='" + villID + "'";
                        MySqlCommand cmd = new MySqlCommand(update, conn);
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        string qry = "insert into mfi.cotton_cropmessage (Check_Date,CropID,VillageID) values ('" + date+ "','"+cropid+"','"+villID+"')";
                        MySqlCommand cmd = new MySqlCommand(qry, conn);
                        cmd.ExecuteNonQuery();
                    }
                }
                conn.Close();
            }
            catch (Exception ex)
            {

            }
            finally { conn.Close(); }
         

           
        }

        private double GetMeanEt(string month, string stateID)
        {
            bool ConnFound = Connection();
            double mean = 0;

            try
            {
                if (ConnFound)
                {
                    string qry = "select Mean_ET from test.evaporation_ratemaster where Month='" + month + "' and StateId='"+stateID+"'";
                    MySqlCommand command = new MySqlCommand(qry,conn);
                    MySqlDataReader rd = command.ExecuteReader();
                    if(rd.HasRows)
                    {
                        while(rd.Read())
                        {
                            mean = Convert.ToDouble(rd["Mean_ET"].ToString());
                        }
                    }
                }
                conn.Close();
            }
            catch(Exception ex)
            {

            }
            finally { conn.Close(); }
            return mean;
        }

        void SMSSchedulerMain_GGRC()
        {
            execQuery("delete from mfi.ggrcvillagesms where LogDate < '" + DateTime.Now.AddDays(-14).ToString("yyyy-MM-dd") + "'");
            execQuery("delete from mfi.sms_lastsend where date(LogDate) < '" + DateTime.Now.ToString("yyyy-MM-dd") + "'");

            DataTable DTVillages = new DataTable();
            DTVillages = getGGRCVillages();
            string Client = "ggrc";

            DataTable DTSMSTypes = getSMSMaster(Client);


            for (int i = 0; i < DTVillages.Rows.Count; i++)
            {
                string SowingDate = DTVillages.Rows[i]["SowingDateValue"].ToString();
                string VillageID = DTVillages.Rows[i]["ID"].ToString();
                string Village = DTVillages.Rows[i]["Village"].ToString();
                string District = DTVillages.Rows[i]["District"].ToString();
                string Block = DTVillages.Rows[i]["Taluka"].ToString();
                Console.WriteLine("Starting for " + Village + "(" + i + " / " + DTVillages.Rows.Count + ") at " + DateTime.Now);
                double Latitude = DTVillages.Rows[i]["Latitude"].ToString().doubleTP();
                double Longitude = DTVillages.Rows[i]["Longitude"].ToString().doubleTP();
                if (!(District == "PORBANDAR"))
                    continue;

                for (int j = 0; j < DTSMSTypes.Rows.Count; j++)
                {

                    string MessageType = DTSMSTypes.Rows[j]["MessageType"].ToString();
                    if (!(MessageType == "Custom_ZY4BBB5RF9JHWPJV"))
                        continue;
                    string MessageVillageID = DTSMSTypes.Rows[j]["VillageID"].ToString();
                    string MessageDistrict = DTSMSTypes.Rows[j]["DistrictID"].ToString();
                    string MessageBlock = DTSMSTypes.Rows[j]["BlockID"].ToString();
                    if (!(MessageType.ToLower().Contains("custom")))
                    {
                        if (Latitude == 0)
                            continue;
                    }

                    DateTime DTSowingDate = new DateTime();
                    if (SowingDate != "")
                    {
                        string[] ArrSowingDate = SowingDate.Split('-');
                        DTSowingDate = new DateTime(Convert.ToInt32(ArrSowingDate[0]), Convert.ToInt32(ArrSowingDate[1]), Convert.ToInt32(ArrSowingDate[2]));
                    }

                    if (MessageType.ToLower().Contains("custom"))
                    {
                        bool flgMessageSend = false;
                        if (VillageID == MessageVillageID || (MessageVillageID == "0" && MessageBlock == Block) || (MessageVillageID == "0" && MessageBlock == "0" && MessageDistrict == District) || (MessageVillageID == "0" && MessageBlock == "0" && MessageDistrict == "0"))
                            flgMessageSend = true;

                        if (!flgMessageSend)
                            continue;
                    }
                    //else
                    //  continue;
                    string SendingType = DTSMSTypes.Rows[j]["SendingType"].ToString();
                    int SendingFrequency = 0;
                    int.TryParse(DTSMSTypes.Rows[j]["SendingFrequency"].ToString(), out SendingFrequency);
                    DateTime SendingDate = new DateTime();
                    DateTime.TryParse(DTSMSTypes.Rows[j]["SendingDate"].ToString(), out SendingDate);
                    DateTime dtLastSentDate = new DateTime();
                    string CustomMessage = DTSMSTypes.Rows[j]["Message"].ToString();
                    string FloatingDays = DTSMSTypes.Rows[j]["FloatingDays"].ToString();
                    string Status = "";
                    string SMS = "";
                    string SMS2 = "";
                    int floatdays = 0;
                    if (FloatingDays != "")
                    {
                        int.TryParse(FloatingDays, out floatdays);
                    }

                    if (chkVillageProcessed(VillageID, MessageType))
                        continue;

                    DataTable DTLastMessage = getVillageLastMessage(VillageID, MessageType);

                    if (DTLastMessage.Rows.Count > 0)
                    {
                        DateTime.TryParse(DTLastMessage.Rows[0]["ScheduleDate"].ToString(), out dtLastSentDate);
                        Status = DTLastMessage.Rows[0]["Status"].ToString();
                    }

                    bool flgDoProcess = false;

                    if (SendingType == "Day")
                        flgDoProcess = (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= dtLastSentDate.Date.AddDays(SendingFrequency)));
                    else if (SendingType == "Floating")
                        flgDoProcess = (DateTime.Now.Date == DTSowingDate.AddDays(floatdays) && Status == "");
                    else
                        flgDoProcess = (DateTime.Now >= SendingDate && SendingDate > DateTime.Now.AddDays(-15) && Status == "");

                    if (!flgDoProcess)
                        continue;

                    if (MessageType == "forecast")
                    {
                        SMS = getGGRCForecastSMS(Latitude, Longitude, Village, Client);
                    }
                    if (MessageType == "PHLow")
                    {
                        string Ph = "";
                        Ph = getGGRCSoilAnalysis(Village, Latitude, Longitude, "PH");
                        if (!(Ph.doubleTP() < 5.5))
                            continue;
                        SMS = CustomMessage;

                    }
                    if (MessageType == "PHHigh")
                    {
                        string Ph = "";
                        Ph = getGGRCSoilAnalysis(Village, Latitude, Longitude, "PH");
                        if (!(Ph.doubleTP() > 8.0))
                            continue;
                        SMS = CustomMessage;
                    }
                    if (MessageType == "SoilTexture")
                    {
                        string st = "";
                        st = getGGRCSoilAnalysis(Village, Latitude, Longitude, "SoilTexture");
                        if (!(st.ToLower().Contains("sandy")))
                            continue;
                        SMS = CustomMessage;
                    }
                    if (MessageType == "NDVI")
                    {
                        DataTable DTNDVI = new DataTable();
                        DTNDVI = getGGRCNDVI(VillageID, DTSowingDate.AddDays(90), DTSowingDate.AddDays(120));
                        string NDVIValue = DTNDVI.Rows[0][0].ToString().Trim();
                        if (NDVIValue == "")
                            continue;
                        double NDVI = NDVIValue.doubleTP();
                        if (!(NDVI < 0.5))
                            continue;
                        SMS = CustomMessage;
                    }
                    else if (MessageType == "weather")
                    {
                        SMS = getGGRCWeatherDataSMS(Latitude, Longitude, Village, Client);
                    }
                    else if (MessageType == "disease")
                    {
                        List<string> lstSMS = getGGRCDiseaseSMS(Latitude, Longitude, Village, Client);
                        if (lstSMS.Count > 0)
                        {
                            SMS = lstSMS[0];
                            SMS2 = lstSMS[1];
                        }
                    }
                    else if (MessageType == "planthealth")
                    {
                        SMS = getGGRCMoistureSMS(VillageID, Village, Client);
                    }
                    else if (MessageType == "raindeficit")
                    {
                        if (Client == "ggrc")
                            SMS = "વરસાદ અછતની પરિસ્થિતિમાં જમીનના ભેજનું સંરક્ષણ કરવું જરૂરી છે તે માટે વારંવાર કરબ (હળવી ખેડ- જમીન ના ઉપર ના પડ ને તોડવા માટે) થી ખેડ કરવી સલાહભર્યું છે.";
                        else
                            SMS = "Repeated hoeing is advisable to conserve the soil moisture under scanty rainfall conditions.";
                    }
                    else if (MessageType == "leafreddening")
                    {
                        if (Client == "ggrc")
                            SMS = "ફૂલ ભમરી અને જીંડવા શરુ થવાના સમયે ૦.૨% મેગ્નેશિયમ સલ્ફેટ આપવાથી પાન ની રતાશ ઓછી કરી શકાય.";
                        else
                            SMS = "Application of 0.2 % Magnesium sulphate at square formation and boll formation to reduce leaf reddening.";
                    }
                    else if (MessageType == "flower1" || MessageType == "flower2" || MessageType == "flower3")
                    {
                        if (Client == "ggrc")
                            SMS = " મહત્તમ ઉપજ માટે, ફૂલ ભમરીના પ્રારંભિક તબક્કે પોટેશિયમ નાઈટ્રેટ 2 કિલોગ્રામ / 100 લિટર પાણીનો  પાંદડાં પર છંટકાવ લાભદાયી રહેશે.";
                        else
                            SMS = "For yield maximization, foliar application of Potassium Nitrate @ 2kg/100 lit of water at flower initiation stage would be benificial.";
                    }
                    else if (MessageType == "weedemergence")
                    {
                        if (Client == "ggrc")
                            SMS = "નીંદણ નિયત્રણ: ઉગતા નીંદણને નિયંત્રિત કરવા માટે પાક માં આંતરખેડ કરવી જોઈએ.";
                        else
                            SMS = "Weed Management: Intercultural operations should be carried out to control emerging weeds.";
                    }
                    else if (MessageType == "flowertoball")
                    {
                        if (Client == "ggrc")
                            SMS = "ફૂલ અને કળી નું ખરી પડવું : NAA (પ્લેનોફિક્ષ) નો છંટકાવ : ફૂલો અને ફૂલ ભમરીની વધુ સંખ્યાને જાળવી રાખવા અને ઉપજ વધારવા માટે પાક પર 15 લિટર પાણી પ્રમાણે  3.5 મીલી NAA નો છંટકાવ કરવો.";
                        else
                            SMS = "Flower/ Bud dropping: Spray Of NAA(Planofix): Spray NAA @ 3.5 ml per 15 litres of water on the crop to retain more number of squares and flowers and to increase the yield.";
                    }
                    else if (MessageType.ToLower().Contains("custom"))
                        SMS = CustomMessage;



                    if (SendingType == "Date" && DateTime.Now >= SendingDate && Status == "")
                    {
                        if (SMS != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + SendingDate.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "')");
                        if (SMS2 != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + SendingDate.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "')");
                        if (SMS != "" && SMS2 != "")
                            Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    }
                    else if (SendingType == "Day" && (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= dtLastSentDate.Date.AddDays(SendingFrequency))))
                    {
                        execQuery("update mfi.ggrcvillagesms set Status = 'Expired' where VillageID = " + VillageID + " and MessageType = '" + MessageType + "'");


                        if (SMS != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate, Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "')");
                        if (SMS2 != "")
                            execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "')");

                        if (SMS != "" && SMS2 != "")
                            Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    }
                    else if (SendingType == "Floating" && (dtLastSentDate.Year == 1 || (DateTime.Now.Date >= DTSowingDate.AddDays(floatdays))))
                    {
                        //execQuery("update mfi.ggrcvillagesms set Status = 'Expired' where VillageID = " + VillageID + " and MessageType = '" + MessageType + "'");


                        //if (SMS != "")
                        //    execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate, Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS + "', '" + MessageType + "')");
                        //if (SMS2 != "")
                        //    execQuery("insert into mfi.ggrcvillagesms (VillageID, ScheduleDate, LogDate,Status, Message, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', 'Pending', '" + SMS2 + "', '" + MessageType + "')");

                        //if (SMS != "" && SMS2 != "")
                        //    Console.WriteLine(Village + " " + SendingType + " " + MessageType + " added (" + j + "/" + DTSMSTypes.Rows.Count + ") at " + DateTime.Now);
                    }
                   // execQuery("insert into mfi.sms_lastsend (VillageID, LogDate, MessageType) values ('" + VillageID + "', '" + DateTime.Now.ToString("yyyy-MM-dd") + "', '" + MessageType + "')");

                }
            }
        }






      

        public bool execQuery(string Query)
        {
            bool ConnFound = Connection();
            string sql = "";
            try
            {
                if (ConnFound)
                {

                    sql = Query;

                    MySqlCommand Cmd = new MySqlCommand(sql, conn);
                    if (Cmd.ExecuteNonQuery() > 0)
                    {
                        conn.Close();
                        return true;
                    }
                    else
                    {
                        conn.Close();
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception e)
            {
                conn.Close();
                return false;
            }

        }

        public void PepsicoWork()
        {

        }

        public List<string> getGGRCDiseaseSMS(double Latitude, double Longitude, string Village, string Client)
        {
            List<string> objResult = new List<string>();
            try
            {
                WebClient wc = new WebClient();
                string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/WZDailyForecast/" + Latitude + "," + Longitude + "/New%20Delhi/" + DateTime.Now.AddDays(1).ToString("yyyy-MM-dd") + "/" + DateTime.Now.AddDays(4).ToString("yyyy-MM-dd") + "/District/json/internal";
                string strForecast = wc.DownloadString(apiAddr);
                // strForecast = strForecast.Replace("\\\\\\\"","\"");
                DataTable DTForecastFUll = new DataTable();
                DataTable DTForecast = new DataTable();
                string objFOrecast = JsonConvert.DeserializeObject<string>(strForecast);
                if (objFOrecast != "no data")
                {
                    DTForecastFUll = JsonConvert.DeserializeObject<DataTable>(objFOrecast);

                    bool flgCondition = true;

                    for (int i = 0; i < DTForecastFUll.Rows.Count; i++)
                    {
                        double MaxTemp = DTForecastFUll.Rows[i]["MaxTemp"].ToString().doubleTP();
                        double HumidityMor = DTForecastFUll.Rows[i]["MaxHumidity"].ToString().doubleTP();
                        double HumidityEve = DTForecastFUll.Rows[i]["MinHumidity"].ToString().doubleTP();

                        if (MaxTemp < 33 || HumidityMor > 70 || HumidityEve < 40)
                            flgCondition = false;
                    }
                    string PreventiveMessage = "";
                    if (Client == "ggrc")
                        PreventiveMessage = "૧. ગુલાબી ઈયળના વસ્તી વિકાસને નિયંત્રિત કરવા માટે ગૉસ્પ્લર ફીરોમોન પીજર (ફેરોમોન ટ્રેપ) પ્રતિ હે.  ૨૦ નંગ પ્રમાણે લગાવવા." +
                               "૨.  આર્થિક ક્ષમ્ય માત્રા પ્રમાણે સળંગ ત્રણ દિવસ પ્રતિ પિંજર દીઠ 8 ફૂંદા જોવા મળેતો  એક જંતુનાશકનો  સ્પ્રે કરવો";
                    else
                        PreventiveMessage = "1. To install gossyplure pheromone baited traps @ 20 nos./ha to arrest the population development of PINK BOLLWORM. " +
                        "2. At economic threshold of 8 moths per trap per night for three consecutive nights, an insecticidal spray in the field is desired.";
                    string CurativeMessage = "";
                    if (Client == "ggrc")
                        CurativeMessage = "ગુલાબી ઈયળના નિયંત્રિણ માટે  પાક ઉપર પ્રોફેનોફોસ ૫૦% EC ૩ મિલિ / લી. અથવા ટ્રાઇઝોફોસ ૪૦% EC ૩ મિલિ/લી. અથવા થાયોડીકાર્બ ૭૫% WP ૪ ગ્રામ/ લીટર પાણી પ્રમાણે ભેળવી છંટકાવ કરવા નીએ ભલામણ છે.";
                    else
                        CurativeMessage = "To control  PINK BOLLWORM foliar application of Profenophos 50%EC @ 3 ml /lit or or Triazophos 40% EC @3ml/lit or Thiodicarb 75%WP @ 4 gms/lit of water is recommended.";

                    if (flgCondition)
                    {
                        objResult.Add(PreventiveMessage);
                        objResult.Add(CurativeMessage);
                    }
                }
                return objResult;
            }
            catch (Exception ex)
            {
                return objResult;
            }
        }
        public bool chkLateBlightCondition(double Latitude, double Longitude, string Village, string Client)
        {
            bool flgCondition = false;
            List<string> objResult = new List<string>();
            try
            {
                WebClient wc = new WebClient();
                string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/WZDailyForecast/" + Latitude + "," + Longitude + "/New%20Delhi/" + DateTime.Now.AddDays(1).ToString("yyyy-MM-dd") + "/" + DateTime.Now.AddDays(10).ToString("yyyy-MM-dd") + "/District/json/internal";
                string strForecast = wc.DownloadString(apiAddr);
                // strForecast = strForecast.Replace("\\\\\\\"","\"");
                DataTable DTForecastFUll = new DataTable();
                DataTable DTForecast = new DataTable();
                string objFOrecast = JsonConvert.DeserializeObject<string>(strForecast);
                if (objFOrecast != "no data")
                {
                    DTForecastFUll = JsonConvert.DeserializeObject<DataTable>(objFOrecast);

                    int DiseaseCtr = 0;
                    for (int i = 0; i < DTForecastFUll.Rows.Count; i++)
                    {
                        double MaxTemp = DTForecastFUll.Rows[i]["MaxTemp"].ToString().doubleTP();
                        double MinTemp = DTForecastFUll.Rows[i]["MinTemp"].ToString().doubleTP();
                        double HumidityMor = DTForecastFUll.Rows[i]["MaxHumidity"].ToString().doubleTP();
                        double HumidityEve = DTForecastFUll.Rows[i]["MinHumidity"].ToString().doubleTP();
                        double AvgHumidity = (HumidityMor + HumidityEve) / 2;
                        if (MaxTemp >= 10 && MaxTemp <= 25 && MinTemp <= 10 && AvgHumidity >= 90)
                        {
                            DiseaseCtr++;
                            if (DiseaseCtr == 3)
                                flgCondition = true;
                        }
                        else
                            DiseaseCtr = 0;
                    }

                }
                return flgCondition;
            }
            catch (Exception ex)
            {
                return flgCondition;
            }
        }

        public string getGGRCWeatherDataSMS(double Latitude, double Longitude, string Village, string Client)
        {
            string result = "";
            try
            {
                WebClient wc = new WebClient();
                string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/EstActualData/" + Latitude + "/" + Longitude + "/" + DateTime.Now.AddDays(-3).ToString("yyyy-MM-dd") + "/" + DateTime.Now.ToString("yyyy-MM-dd") + "/wrlinternaldata";
               // string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/EstActualData/" + Latitude + "/" + Longitude + "/" + DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd") + "/" + DateTime.Now.ToString("yyyy-MM-dd") + "/wrlinternaldata";
                string strForecast = wc.DownloadString(apiAddr);
                // strForecast = strForecast.Replace("\\\\\\\"","\"");
                DataTable DTForecastFUll = new DataTable();
                DataTable DTForecast = new DataTable();
                string objFOrecast = JsonConvert.DeserializeObject<string>(strForecast);
                if (objFOrecast != "no data")
                {
                    DTForecastFUll = JsonConvert.DeserializeObject<DataTable>(objFOrecast);
                    double Temp_Max = 0;
                    double Temp_Min = 1000;
                    double Humidity_Max = 0;
                    double Humidity_Min = 1000;
                    double TotRain = 0;
                    for (int i = 0; i < DTForecastFUll.Rows.Count; i++)
                    {
                        if (DTForecastFUll.Rows[i]["MaxTemp"].ToString() != "")
                        {
                            double MaxTemp = DTForecastFUll.Rows[i]["MaxTemp"].ToString().doubleTP();
                            if (MaxTemp > Temp_Max)
                                Temp_Max = MaxTemp;
                            if (MaxTemp < Temp_Min)
                                Temp_Min = MaxTemp;

                        }

                        if (DTForecastFUll.Rows[i]["Humidity"].ToString() != "")
                        {
                            double Humidity = DTForecastFUll.Rows[i]["Humidity"].ToString().doubleTP();
                            if (Humidity > Humidity_Max)
                                Humidity_Max = Humidity;
                            if (Humidity < Humidity_Min)
                                Humidity_Min = Humidity;

                        }

                        TotRain = TotRain + DTForecastFUll.Rows[i]["Rain"].ToString().doubleTP();

                    }
                    string MyMessage = "";
                    if (Client == "ggrc")
                        MyMessage = "હવામાન (વાસ્તવિક)- છેલ્લા ૩ દિવસનું તાપમાન " + Temp_Min + " - " +
                                  Temp_Max + " સે., આદ્રતા (હવાનો ભેજ ) " + Humidity_Min + " - " + Humidity_Max +
                                  "%, વરસાદ- " + TotRain + " મી.મી.";



                    if (Client == "test")
                        MyMessage = "હવામાન (વાસ્તવિક)- છેલ્લા ૩ દિવસનું તાપમાન " + Temp_Min + " - " +
                                  Temp_Max + " સે., આદ્રતા (હવાનો ભેજ ) " + Humidity_Min + " - " + Humidity_Max +
                                  "%, વરસાદ- " + TotRain + " મી.મી.";
                    else
                        MyMessage = Village + " Weather[G]- Last 3 days Temp " + Temp_Min + " - " +
                                 Temp_Max + " deg, Humidity " + Humidity_Min + " - " + Humidity_Max +
                                 "%, Rain - " + TotRain + " mm";
                    result = MyMessage;

                }
                return result;
            }
            catch (Exception ex)
            {
                return result;
            }
        }




        public double GetCropRainData(double Latitude, double Longitude, string Village, string Client)
        {
            double result =0;
            try
            {
                WebClient wc = new WebClient();
                string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/EstActualData/" + Latitude + "/" + Longitude + "/" + DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd") + "/" + DateTime.Now.ToString("yyyy-MM-dd") + "/wrlinternaldata";
                // string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/EstActualData/" + Latitude + "/" + Longitude + "/" + DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd") + "/" + DateTime.Now.ToString("yyyy-MM-dd") + "/wrlinternaldata";
                string strForecast = wc.DownloadString(apiAddr);
                // strForecast = strForecast.Replace("\\\\\\\"","\"");
                DataTable DTForecastFUll = new DataTable();
                DataTable DTForecast = new DataTable();
                string objFOrecast = JsonConvert.DeserializeObject<string>(strForecast);
                if (objFOrecast != "no data")
                {
                    DTForecastFUll = JsonConvert.DeserializeObject<DataTable>(objFOrecast);
                    double Temp_Max = 0;
                    double Temp_Min = 1000;
                    double Humidity_Max = 0;
                    double Humidity_Min = 1000;
                    double TotRain = 0;
                    for (int i = 0; i < DTForecastFUll.Rows.Count; i++)
                    {
                        if (DTForecastFUll.Rows[i]["MaxTemp"].ToString() != "")
                        {
                            double MaxTemp = DTForecastFUll.Rows[i]["MaxTemp"].ToString().doubleTP();
                            if (MaxTemp > Temp_Max)
                                Temp_Max = MaxTemp;
                            if (MaxTemp < Temp_Min)
                                Temp_Min = MaxTemp;

                        }

                        if (DTForecastFUll.Rows[i]["Humidity"].ToString() != "")
                        {
                            double Humidity = DTForecastFUll.Rows[i]["Humidity"].ToString().doubleTP();
                            if (Humidity > Humidity_Max)
                                Humidity_Max = Humidity;
                            if (Humidity < Humidity_Min)
                                Humidity_Min = Humidity;

                        }

                        TotRain = TotRain + DTForecastFUll.Rows[i]["Rain"].ToString().doubleTP();

                    }


                    if (Client == "test")
                        result = TotRain;
                 

                }
                return result;
            }
            catch (Exception ex)
            {
                return result;
            }
        }
        public double getGGRCCropForecastSMS(double Latitude, double Longitude, string Village, string Client)
        {
            double result = 0;
            try
            {
                WebClient wc = new WebClient();
                string apiAddr = "https://weather-risk.com/wdrest.svc/Weather/WZDailyForecast/" + Latitude + "," + Longitude + "/New%20Delhi/" + DateTime.Now.ToString("yyyy-MM-dd") + "/" + DateTime.Now.AddDays(3).ToString("yyyy-MM-dd") + "/District/json/internal";
                string strForecast = wc.DownloadString(apiAddr);
                // strForecast = strForecast.Replace("\\\\\\\"","\"");
                DataTable DTForecastFUll = new DataTable();
                DataTable DTForecast = new DataTable();
                string objFOrecast = JsonConvert.DeserializeObject<string>(strForecast);
                if (objFOrecast != "no data")
                {
                    DTForecastFUll = JsonConvert.DeserializeObject<DataTable>(objFOrecast);
                    double MaxTemp_Max = 0;
                    double MaxTemp_Min = 1000;
                    double MinTemp_Max = 0;
                    double MinTemp_Min = 1000;
                    double Humidity_Max = 0;
                    double Humidity_Min = 1000;
                    double TotRain = 0;
                    for (int i = 0; i < DTForecastFUll.Rows.Count; i++)
                    {
                        if (DTForecastFUll.Rows[i]["MaxTemp"].ToString() != "")
                        {
                            double MaxTemp = DTForecastFUll.Rows[i]["MaxTemp"].ToString().doubleTP();
                            if (MaxTemp > MaxTemp_Max)
                                MaxTemp_Max = MaxTemp;
                            if (MaxTemp < MaxTemp_Min)
                                MaxTemp_Min = MaxTemp;

                        }

                        if (DTForecastFUll.Rows[i]["MinTemp"].ToString() != "")
                        {
                            double MinTemp = DTForecastFUll.Rows[i]["MinTemp"].ToString().doubleTP();
                            if (MinTemp > MinTemp_Max)
                                MinTemp_Max = MinTemp;
                            if (MinTemp < MinTemp_Min)
                                MinTemp_Min = MinTemp;

                        }

                        if (DTForecastFUll.Rows[i]["Humidity"].ToString() != "")
                        {
                            double Humidity = DTForecastFUll.Rows[i]["Humidity"].ToString().doubleTP();
                            if (Humidity > Humidity_Max)
                                Humidity_Max = Humidity;
                            if (Humidity < Humidity_Min)
                                Humidity_Min = Humidity;

                        }

                        TotRain = TotRain + DTForecastFUll.Rows[i]["Rain"].ToString().doubleTP();
                        if(Client=="test")
                        result = TotRain;
                    }
                   

                }
                return result;
            }
            catch (Exception ex)
            {
                return result;
            }
        }

    }

    public static class ExtensionMethods
    {

        public static double doubleTP(this string OrigVal)
        {

            double dblVal = 0;
            double.TryParse(OrigVal, out dblVal);
            return dblVal;
        }
        public static int intTP(this string OrigVal)
        {
            int dblVal = 0;
            int.TryParse(OrigVal, out dblVal);
            return dblVal;
        }
        public static long longTP(this string OrigVal)
        {
            long dblVal = 0;
            long.TryParse(OrigVal, out dblVal);
            return dblVal;
        }
        public static DateTime dtTP(this string OrigVal)
        {
            DateTime dblVal = new DateTime();
            DateTime.TryParse(OrigVal, out dblVal);
            return dblVal;
        }
        public static DataTable ListToDataTable<T>(this IList<T> data, string tableName)
        {
            DataTable table = new DataTable(tableName);

            //special handling for value types and string
            if (typeof(T).IsValueType || typeof(T).Equals(typeof(string)))
            {

                DataColumn dc = new DataColumn("Value");
                table.Columns.Add(dc);
                foreach (T item in data)
                {
                    DataRow dr = table.NewRow();
                    dr[0] = item;
                    table.Rows.Add(dr);
                }
            }
            else
            {
                PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(T));
                foreach (PropertyDescriptor prop in properties)
                {
                    table.Columns.Add(prop.Name,
                    Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
                }
                foreach (T item in data)
                {
                    DataRow row = table.NewRow();
                    foreach (PropertyDescriptor prop in properties)
                    {
                        try
                        {
                            row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                        }
                        catch (Exception ex)
                        {
                            row[prop.Name] = DBNull.Value;
                        }
                    }
                    table.Rows.Add(row);
                }
            }
            return table;
        }
        public static T DeepClone<T>(T obj)
        {
            using (var ms = new MemoryStream())
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(ms, obj);
                ms.Position = 0;

                return (T)formatter.Deserialize(ms);
            }
        }
        public static DataTable ToDataTable<T>(IList<T> data)
        {
            PropertyDescriptorCollection props =
                TypeDescriptor.GetProperties(typeof(T));
            DataTable table = new DataTable();
            for (int i = 0; i < props.Count; i++)
            {
                PropertyDescriptor prop = props[i];
                table.Columns.Add(prop.Name, prop.PropertyType);
            }
            object[] values = new object[props.Count];
            foreach (T item in data)
            {
                for (int i = 0; i < values.Length; i++)
                {
                    values[i] = props[i].GetValue(item);
                }
                table.Rows.Add(values);
            }
            return table;
        }


    }

}
